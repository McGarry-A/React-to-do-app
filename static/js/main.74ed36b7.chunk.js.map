{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["ToDoItem","props","name","index","onClick","func","App","useState","toDoList","setToDoList","toDoItem","setToDoItem","deleteHandler","console","log","storedList","splice","value","onChange","event","target","newArray","push","map","el","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPAmCA,IAAMA,EAAW,SAACC,GAChB,OACE,gCACE,6BAAKA,EAAMC,OACX,wBAAQC,MAAOF,EAAME,MAAOC,QAAS,WAAKH,EAAMI,KAAKJ,EAAME,QAA3D,wBAKSG,EAxCf,WACE,MAAgCC,mBAAS,CAAC,UAA1C,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KAUMC,EAAgB,SAAAT,GACpBU,QAAQC,IAAI,wBACZ,IAAIC,EAAU,YAAOP,GACrBO,EAAWC,OAAOb,EAAO,GACzBM,EAAYM,IAGd,OACE,gCACE,4CACA,uBAAOE,MAAQP,EAAWQ,SAlBL,SAAAC,GAAK,OAAIR,EAAYQ,EAAMC,OAAOH,UAmBvD,wBAAQb,QAjBW,WACrB,IAAIiB,EAAQ,YAAOb,GACnBa,EAASC,KAAKZ,GACdD,EAAYY,IAcV,4BACCb,EAASe,KAAI,SAACC,EAAIrB,GACjB,OAAO,cAAC,EAAD,CAAUD,KAAMsB,EAAgBrB,MAAOA,EAAOE,KAAMO,GAA3BT,UCjBzBsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.74ed36b7.chunk.js","sourcesContent":["import React from \"react\";\nimport { useState } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [toDoList, setToDoList] = useState([\"card1\"]);\n  const [toDoItem, setToDoItem] = useState(\"\");\n\n  const updateInputValue = event => setToDoItem(event.target.value);\n\n  const addCardHandler = () => {\n    let newArray = [...toDoList]\n    newArray.push(toDoItem)\n    setToDoList(newArray)\n  };\n\n  const deleteHandler = index => {\n    console.log(\"deleteHandler called\")\n    let storedList = [...toDoList]\n    storedList.splice(index, 1)\n    setToDoList(storedList)\n  }\n\n  return (\n    <div>\n      <h1>To Do List</h1>\n      <input value={ toDoItem } onChange={ updateInputValue }></input>\n      <button onClick={addCardHandler}>Add To Do Item</button>\n      {toDoList.map((el, index) => {\n        return <ToDoItem name={el} key={index} index={index} func={deleteHandler}/>;\n      })}\n    </div>\n  );\n}\n\nconst ToDoItem = (props) => {\n  return (\n    <div>\n      <h3>{props.name}</h3>\n      <button index={props.index} onClick={()=>{props.func(props.index)}}>Delete</button>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}